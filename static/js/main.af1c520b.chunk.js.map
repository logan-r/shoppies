{"version":3,"sources":["components/Nominations/Nominations.js","components/MovieCard/MovieCard.js","components/SearchPanel/SearchPanel.js","App.js","reportWebVitals.js","index.js"],"names":["Nominations","props","className","nominations","length","map","movie","Title","Year","onClick","removeFromNominations","imdbID","MovieCard","src","Poster","alt","onSelect","isNominated","SearchPanel","useState","searchQuery","setSearchQuery","loading","setLoading","noResults","setNoResults","searchResults","setSearchResults","useEffect","a","fetch","encodeURIComponent","result","json","data","Response","Search","console","log","alert","value","onChange","e","target","placeholder","autoFocus","key","includes","addToNominations","App","setNominations","tempNominations","index","indexOf","splice","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.af1c520b.chunk.js","sourcesContent":["import './Nominations.css';\r\n\r\nexport default function Nominations(props) {\r\n  return (\r\n    <div className=\"Nominations\">\r\n      <h2>Your Nominations</h2>\r\n      {\r\n        props.nominations.length === 0 ?\r\n        <div className=\"Nominations-empty\">No nominations yet</div> :\r\n        <ol>\r\n          {\r\n            props.nominations.map(movie =>\r\n              <li key={movie.imdbID}>\r\n                {movie.Title} ({movie.Year})\r\n                <span className=\"Nominations-remove\" onClick={() => props.removeFromNominations(movie)}>remove</span>\r\n              </li>\r\n            )\r\n          }\r\n        </ol>\r\n      }\r\n\r\n      {\r\n        props.nominations.length === 5 &&\r\n        <div className=\"Nominations-banner\">\r\n          You've selected your 5 movies\r\n        </div>\r\n      }\r\n    </div>\r\n  )\r\n}","import './MovieCard.css';\r\n\r\n/**\r\n * Display a card for a movie\r\n * Props:\r\n * Title {string}  the title of the movie\r\n * Year {number}  the year the movie was made\r\n * Poster {string}  link to poster for the movie\r\n * imdbID {string}  unique ID for the movie\r\n * isNominated {boolean}  is this movie currently nominated?\r\n * onSelect {function}  function to call when nomination button clicked\r\n */\r\nexport default function MovieCard(props) {\r\n  return (\r\n    <div className=\"MovieCard\">\r\n      <img src={props.Poster} alt={`Poster for ${props.Title}`} className=\"MovieCard-poster\" />\r\n      <div className=\"MovieCard-text\">\r\n        <h3>{props.Title}</h3>\r\n        <div className=\"MovieCard-year\">{props.Year}</div>\r\n      </div>\r\n      <div className=\"MovieCard-nominate-btn\" onClick={props.onSelect}>\r\n        {props.isNominated ? 'Unselect' : 'Nominate'}\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport './SearchPanel.css';\r\n\r\nexport default function SearchPanel(props) {\r\n  // Keep track of what the user has entered in search bar\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  // Keep track if currently loading search results from api\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Track if error getting results (due to not typing enough character, etc.)\r\n  const [noResults, setNoResults] = useState(false);\r\n\r\n  // Movies currently being displayed as search results\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Whenever the search query changes, load new results\r\n  useEffect(async () => {\r\n    // Only search if query is non-empty\r\n    if (searchQuery) {\r\n      setLoading(true);\r\n\r\n      // Fetch search results from API\r\n      try {\r\n        const result = await fetch(`http://www.omdbapi.com/?s=${encodeURIComponent(searchQuery)}&type=movie&apikey=23afe4e0`);\r\n        const data = await result.json();\r\n\r\n        // Make sure there was a response\r\n        if (data.Response === 'False') {\r\n          setNoResults(true);\r\n        } else {\r\n          setNoResults(false);\r\n          setSearchResults(data.Search);\r\n        }\r\n\r\n        // Done loading\r\n        setLoading(false);\r\n      } catch(e) {\r\n        console.log(e);\r\n        alert('Error fetching movies from API');\r\n      }\r\n    }\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <div className=\"SearchPanel\">\r\n      <div className=\"SearchPanel-heading-bar\">\r\n        <h1>The Shoppies</h1>\r\n        <input\r\n          className=\"search\"\r\n          value={searchQuery}\r\n          onChange={e => setSearchQuery(e.target.value)}\r\n          placeholder=\"Search by movie title\"\r\n          autoFocus={true}\r\n        />\r\n      </div>\r\n      <div className=\"SearchPanel-content\">\r\n        {\r\n          loading ? 'Loading...' :\r\n          searchQuery === '' ? 'Nominate movies by searching' :\r\n          noResults ? 'Type more to search' : \r\n          <div className=\"SearchPanel-movie-grid\">\r\n            {searchResults.map(movie =>\r\n              <MovieCard\r\n                {...movie}\r\n                key={movie.imdbID}\r\n                isNominated={props.nominations.includes(movie)}\r\n                onSelect={\r\n                  props.nominations.includes(movie) ?\r\n                  () => props.removeFromNominations(movie) :\r\n                  () => props.addToNominations(movie)\r\n                }\r\n              />\r\n            )}\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","import { useState } from 'react';\nimport './App.css';\nimport Nominations from './components/Nominations/Nominations';\nimport SearchPanel from './components/SearchPanel/SearchPanel';\n\nfunction App() {\n  // Keep track of current nominations\n  const [nominations, setNominations] = useState([]);\n  const addToNominations = (movie) => {\n    setNominations([...nominations, movie]);\n  }\n  const removeFromNominations = (movie) => {\n    let tempNominations = [...nominations];\n    let index = tempNominations.indexOf(movie);\n    if (index >= 0) {\n      tempNominations.splice(index, 1);\n      setNominations(tempNominations);\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <SearchPanel nominations={nominations} addToNominations={addToNominations} removeFromNominations={removeFromNominations} />\n      <Nominations nominations={nominations} removeFromNominations={removeFromNominations} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}