[{"/mnt/c/users/logan/code/shoppies/src/index.js":"1","/mnt/c/users/logan/code/shoppies/src/App.js":"2","/mnt/c/users/logan/code/shoppies/src/reportWebVitals.js":"3","/mnt/c/users/logan/code/shoppies/src/components/MovieCard/MovieCard.js":"4","/mnt/c/users/logan/code/shoppies/src/components/SearchPanel/SearchPanel.js":"5","/mnt/c/users/logan/code/shoppies/src/components/Nominations/Nominations.js":"6"},{"size":500,"mtime":1610885965211,"results":"7","hashOfConfig":"8"},{"size":931,"mtime":1610942239135,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610885965230,"results":"10","hashOfConfig":"8"},{"size":893,"mtime":1610941725397,"results":"11","hashOfConfig":"8"},{"size":2600,"mtime":1610942289587,"results":"12","hashOfConfig":"8"},{"size":811,"mtime":1610942609649,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"x6vsyd",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"/mnt/c/users/logan/code/shoppies/src/index.js",[],["28","29"],"/mnt/c/users/logan/code/shoppies/src/App.js",[],"/mnt/c/users/logan/code/shoppies/src/reportWebVitals.js",[],"/mnt/c/users/logan/code/shoppies/src/components/MovieCard/MovieCard.js",[],"/mnt/c/users/logan/code/shoppies/src/components/SearchPanel/SearchPanel.js",["30"],"import { useEffect, useState } from 'react';\r\nimport MovieCard from '../MovieCard/MovieCard';\r\nimport './SearchPanel.css';\r\n\r\nexport default function SearchPanel(props) {\r\n  // Keep track of what the user has entered in search bar\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n\r\n  // Keep track if currently loading search results from api\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Track if error getting results (due to not typing enough character, etc.)\r\n  const [noResults, setNoResults] = useState(false);\r\n\r\n  // Movies currently being displayed as search results\r\n  const [searchResults, setSearchResults] = useState([]);\r\n\r\n  // Whenever the search query changes, load new results\r\n  useEffect(async () => {\r\n    // Only search if query is non-empty\r\n    if (searchQuery) {\r\n      setLoading(true);\r\n\r\n      // Fetch search results from API\r\n      try {\r\n        const result = await fetch(`http://www.omdbapi.com/?s=${encodeURIComponent(searchQuery)}&type=movie&apikey=23afe4e0`);\r\n        const data = await result.json();\r\n\r\n        // Make sure there was a response\r\n        if (data.Response === 'False') {\r\n          setNoResults(true);\r\n        } else {\r\n          setNoResults(false);\r\n          setSearchResults(data.Search);\r\n        }\r\n\r\n        // Done loading\r\n        setLoading(false);\r\n      } catch(e) {\r\n        console.log(e);\r\n        alert('Error fetching movies from API');\r\n      }\r\n    }\r\n  }, [searchQuery]);\r\n\r\n  return (\r\n    <div className=\"SearchPanel\">\r\n      <div className=\"SearchPanel-heading-bar\">\r\n        <h1>The Shoppies</h1>\r\n        <input\r\n          className=\"search\"\r\n          value={searchQuery}\r\n          onChange={e => setSearchQuery(e.target.value)}\r\n          placeholder=\"Search by movie title\"\r\n          autoFocus={true}\r\n        />\r\n      </div>\r\n      <div className=\"SearchPanel-content\">\r\n        {\r\n          loading ? 'Loading...' :\r\n          searchQuery === '' ? 'Nominate movies by searching' :\r\n          noResults ? 'Type more to search' : \r\n          <div className=\"SearchPanel-movie-grid\">\r\n            {searchResults.map(movie =>\r\n              <MovieCard\r\n                {...movie}\r\n                key={movie.imdbID}\r\n                isNominated={props.nominations.includes(movie)}\r\n                onSelect={\r\n                  props.nominations.includes(movie) ?\r\n                  () => props.removeFromNominations(movie) :\r\n                  () => props.addToNominations(movie)\r\n                }\r\n              />\r\n            )}\r\n          </div>\r\n        }\r\n      </div>\r\n    </div>\r\n  )\r\n}","/mnt/c/users/logan/code/shoppies/src/components/Nominations/Nominations.js",[],{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":19,"column":13,"nodeType":"37","endLine":44,"endColumn":4},"no-native-reassign",["38"],"no-negated-in-lhs",["39"],"react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","no-global-assign","no-unsafe-negation"]